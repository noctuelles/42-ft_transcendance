generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// An User can have played multiple match (as the user one or user two) -> 1-n relationship.
// An User can have won multiple matches -> 1-n relationship.
// An User can have a single profile -> 1-1 relationship.
// Tables Match holds the FK-key.

model User {
    id              Int              @id @unique @default(autoincrement())
    login           String           @unique
    name            String           @unique
    profile         Profile?
    profile_picture String
    AuthIdentifier  AuthIdentifier[]
    matchAsUserOne  Match[]          @relation("UserOne")
    matchAsUserTwo  Match[]          @relation("UserTwo")
    matchesWon      Match[]          @relation("WinnerUser")
    matchesLost     Match[]          @relation("LooserUser")
}

model Profile {
    id            Int  @id @unique @default(autoincrement())
    playedMatches Int  @default(0)
    wonMatches    Int  @default(0)
    user          User @relation(fields: [userId], references: [id])
    userId        Int  @unique
}

model Match {
    id         Int       @id @unique @default(autoincrement())
    createdAt  DateTime  @default(now())
    finishedAt DateTime?
    bounces    Int
    userOne    User      @relation("UserOne", fields: [userOneId], references: [id])
    userTwo    User      @relation("UserTwo", fields: [userTwoId], references: [id])
    winner     User      @relation("WinnerUser", fields: [winnerId], references: [id])
    looser     User      @relation("LooserUser", fields: [looserId], references: [id])
    userOneId  Int
    userTwoId  Int
    winnerId   Int
    looserId   Int
}

model AuthIdentifier {
    identifier String @id @unique
    user       User   @relation(fields: [userId], references: [id])
    userId     Int
}
